/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HabitsHabitIdRouteImport } from './routes/habits/$habitId'
import { Route as HabitsIndexRouteImport } from './routes/habits/index'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsRouteImport } from './routes/settings'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const HabitsIndexRoute = HabitsIndexRouteImport.update({
  id: '/habits/',
  path: '/habits/',
  getParentRoute: () => rootRouteImport,
} as any)
const HabitsHabitIdRoute = HabitsHabitIdRouteImport.update({
  id: '/habits/$habitId',
  path: '/habits/$habitId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/habits': typeof HabitsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/habits': typeof HabitsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/settings': typeof SettingsRoute
  '/habits/$habitId': typeof HabitsHabitIdRoute
  '/habits/': typeof HabitsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/settings' | '/habits/$habitId' | '/habits'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/habits/$habitId' | '/habits'
  id: '__root__' | '/' | '/settings' | '/habits/$habitId' | '/habits/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingsRoute: typeof SettingsRoute
  HabitsHabitIdRoute: typeof HabitsHabitIdRoute
  HabitsIndexRoute: typeof HabitsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/habits/': {
      id: '/habits/'
      path: '/habits'
      fullPath: '/habits'
      preLoaderRoute: typeof HabitsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/habits/$habitId': {
      id: '/habits/$habitId'
      path: '/habits/$habitId'
      fullPath: '/habits/$habitId'
      preLoaderRoute: typeof HabitsHabitIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingsRoute: SettingsRoute,
  HabitsHabitIdRoute: HabitsHabitIdRoute,
  HabitsIndexRoute: HabitsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'

declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
